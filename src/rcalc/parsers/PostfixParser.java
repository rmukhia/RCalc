
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Mar 26 04:06:49 ICT 2018
//----------------------------------------------------

package rcalc.parsers;

import rcalc.lexer.Token;
import rcalc.parsers.terminals.*;
import rcalc.parsers.nonterminals.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Mar 26 04:06:49 ICT 2018
  */
public class PostfixParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public PostfixParser() {super();}

  /** Constructor which sets the default scanner. */
  public PostfixParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public PostfixParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\013\000\002\002\004\000\002\002\003\000\002\003" +
    "\005\000\002\003\005\000\002\003\005\000\002\003\005" +
    "\000\002\003\005\000\002\003\006\000\002\003\003\000" +
    "\002\004\003\000\002\005\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\021\000\006\011\007\013\006\001\002\000\022\002" +
    "\ufff8\004\ufff8\005\ufff8\006\ufff8\007\ufff8\010\ufff8\011\ufff8" +
    "\013\ufff8\001\002\000\022\002\ufff9\004\ufff9\005\ufff9\006" +
    "\ufff9\007\ufff9\010\ufff9\011\ufff9\013\ufff9\001\002\000\022" +
    "\002\ufff7\004\ufff7\005\ufff7\006\ufff7\007\ufff7\010\ufff7\011" +
    "\ufff7\013\ufff7\001\002\000\006\011\007\013\006\001\002" +
    "\000\010\002\000\011\007\013\006\001\002\000\004\002" +
    "\012\001\002\000\004\002\001\001\002\000\020\004\017" +
    "\005\014\006\016\007\015\010\020\011\007\013\006\001" +
    "\002\000\022\002\ufffe\004\ufffe\005\ufffe\006\ufffe\007\ufffe" +
    "\010\ufffe\011\ufffe\013\ufffe\001\002\000\022\002\ufffc\004" +
    "\ufffc\005\ufffc\006\ufffc\007\ufffc\010\ufffc\011\ufffc\013\ufffc" +
    "\001\002\000\022\002\ufffd\004\ufffd\005\ufffd\006\ufffd\007" +
    "\ufffd\010\ufffd\011\ufffd\013\ufffd\001\002\000\022\002\uffff" +
    "\004\uffff\005\uffff\006\uffff\007\uffff\010\uffff\011\uffff\013" +
    "\uffff\001\002\000\022\002\ufffb\004\ufffb\005\ufffb\006\ufffb" +
    "\007\ufffb\010\ufffb\011\ufffb\013\ufffb\001\002\000\010\005" +
    "\022\011\007\013\006\001\002\000\004\012\023\001\002" +
    "\000\022\002\ufffa\004\ufffa\005\ufffa\006\ufffa\007\ufffa\010" +
    "\ufffa\011\ufffa\013\ufffa\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\021\000\012\002\010\003\007\004\004\005\003\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\003\020\004\004\005\003\001\001\000\010\003" +
    "\012\004\004\005\003\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\003\012\004\004\005\003\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\003\012\004\004\005" +
    "\003\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$PostfixParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$PostfixParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$PostfixParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$PostfixParser$actions {
  private final PostfixParser parser;

  /** Constructor */
  CUP$PostfixParser$actions(PostfixParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$PostfixParser$do_action(
    int                        CUP$PostfixParser$act_num,
    java_cup.runtime.lr_parser CUP$PostfixParser$parser,
    java.util.Stack            CUP$PostfixParser$stack,
    int                        CUP$PostfixParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$PostfixParser$result;

      /* select the action based on the action number */
      switch (CUP$PostfixParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // NUM ::= NUMBER 
            {
              NUMNode RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$PostfixParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$PostfixParser$stack.peek()).right;
		Token l = (Token)((java_cup.runtime.Symbol) CUP$PostfixParser$stack.peek()).value;
		 RESULT = new NUMNode(new NumberNode(l)); 
              CUP$PostfixParser$result = parser.getSymbolFactory().newSymbol("NUM",3, ((java_cup.runtime.Symbol)CUP$PostfixParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PostfixParser$stack.peek()), RESULT);
            }
          return CUP$PostfixParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // FACTOR ::= NUM 
            {
              FACTORNode RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$PostfixParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$PostfixParser$stack.peek()).right;
		NUMNode l = (NUMNode)((java_cup.runtime.Symbol) CUP$PostfixParser$stack.peek()).value;
		 RESULT = new FACTORNode(l); 
              CUP$PostfixParser$result = parser.getSymbolFactory().newSymbol("FACTOR",2, ((java_cup.runtime.Symbol)CUP$PostfixParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PostfixParser$stack.peek()), RESULT);
            }
          return CUP$PostfixParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // TERM ::= FACTOR 
            {
              TERMNode RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$PostfixParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$PostfixParser$stack.peek()).right;
		FACTORNode l = (FACTORNode)((java_cup.runtime.Symbol) CUP$PostfixParser$stack.peek()).value;
		 RESULT = new TERMNode(l); 
              CUP$PostfixParser$result = parser.getSymbolFactory().newSymbol("TERM",1, ((java_cup.runtime.Symbol)CUP$PostfixParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PostfixParser$stack.peek()), RESULT);
            }
          return CUP$PostfixParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // TERM ::= LPAREN TERM MINUS RPAREN 
            {
              TERMNode RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$PostfixParser$stack.elementAt(CUP$PostfixParser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$PostfixParser$stack.elementAt(CUP$PostfixParser$top-3)).right;
		Token l = (Token)((java_cup.runtime.Symbol) CUP$PostfixParser$stack.elementAt(CUP$PostfixParser$top-3)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$PostfixParser$stack.elementAt(CUP$PostfixParser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$PostfixParser$stack.elementAt(CUP$PostfixParser$top-2)).right;
		TERMNode r = (TERMNode)((java_cup.runtime.Symbol) CUP$PostfixParser$stack.elementAt(CUP$PostfixParser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$PostfixParser$stack.elementAt(CUP$PostfixParser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$PostfixParser$stack.elementAt(CUP$PostfixParser$top-1)).right;
		Token m = (Token)((java_cup.runtime.Symbol) CUP$PostfixParser$stack.elementAt(CUP$PostfixParser$top-1)).value;
		int rpleft = ((java_cup.runtime.Symbol)CUP$PostfixParser$stack.peek()).left;
		int rpright = ((java_cup.runtime.Symbol)CUP$PostfixParser$stack.peek()).right;
		Token rp = (Token)((java_cup.runtime.Symbol) CUP$PostfixParser$stack.peek()).value;
		 RESULT = new TERMNode(new LParenNode(l), new MinusNode(m), r, new RParenNode(rp)); 
              CUP$PostfixParser$result = parser.getSymbolFactory().newSymbol("TERM",1, ((java_cup.runtime.Symbol)CUP$PostfixParser$stack.elementAt(CUP$PostfixParser$top-3)), ((java_cup.runtime.Symbol)CUP$PostfixParser$stack.peek()), RESULT);
            }
          return CUP$PostfixParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // TERM ::= TERM TERM EXP 
            {
              TERMNode RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$PostfixParser$stack.elementAt(CUP$PostfixParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$PostfixParser$stack.elementAt(CUP$PostfixParser$top-2)).right;
		TERMNode l = (TERMNode)((java_cup.runtime.Symbol) CUP$PostfixParser$stack.elementAt(CUP$PostfixParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$PostfixParser$stack.elementAt(CUP$PostfixParser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$PostfixParser$stack.elementAt(CUP$PostfixParser$top-1)).right;
		TERMNode r = (TERMNode)((java_cup.runtime.Symbol) CUP$PostfixParser$stack.elementAt(CUP$PostfixParser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$PostfixParser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$PostfixParser$stack.peek()).right;
		Token m = (Token)((java_cup.runtime.Symbol) CUP$PostfixParser$stack.peek()).value;
		 RESULT = new TERMNode(l, new ExponentNode(m), r); 
              CUP$PostfixParser$result = parser.getSymbolFactory().newSymbol("TERM",1, ((java_cup.runtime.Symbol)CUP$PostfixParser$stack.elementAt(CUP$PostfixParser$top-2)), ((java_cup.runtime.Symbol)CUP$PostfixParser$stack.peek()), RESULT);
            }
          return CUP$PostfixParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // TERM ::= TERM TERM DIVIDE 
            {
              TERMNode RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$PostfixParser$stack.elementAt(CUP$PostfixParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$PostfixParser$stack.elementAt(CUP$PostfixParser$top-2)).right;
		TERMNode l = (TERMNode)((java_cup.runtime.Symbol) CUP$PostfixParser$stack.elementAt(CUP$PostfixParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$PostfixParser$stack.elementAt(CUP$PostfixParser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$PostfixParser$stack.elementAt(CUP$PostfixParser$top-1)).right;
		TERMNode r = (TERMNode)((java_cup.runtime.Symbol) CUP$PostfixParser$stack.elementAt(CUP$PostfixParser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$PostfixParser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$PostfixParser$stack.peek()).right;
		Token m = (Token)((java_cup.runtime.Symbol) CUP$PostfixParser$stack.peek()).value;
		 RESULT = new TERMNode(l, new DivideNode(m), r); 
              CUP$PostfixParser$result = parser.getSymbolFactory().newSymbol("TERM",1, ((java_cup.runtime.Symbol)CUP$PostfixParser$stack.elementAt(CUP$PostfixParser$top-2)), ((java_cup.runtime.Symbol)CUP$PostfixParser$stack.peek()), RESULT);
            }
          return CUP$PostfixParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // TERM ::= TERM TERM MULTIPLY 
            {
              TERMNode RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$PostfixParser$stack.elementAt(CUP$PostfixParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$PostfixParser$stack.elementAt(CUP$PostfixParser$top-2)).right;
		TERMNode l = (TERMNode)((java_cup.runtime.Symbol) CUP$PostfixParser$stack.elementAt(CUP$PostfixParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$PostfixParser$stack.elementAt(CUP$PostfixParser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$PostfixParser$stack.elementAt(CUP$PostfixParser$top-1)).right;
		TERMNode r = (TERMNode)((java_cup.runtime.Symbol) CUP$PostfixParser$stack.elementAt(CUP$PostfixParser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$PostfixParser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$PostfixParser$stack.peek()).right;
		Token m = (Token)((java_cup.runtime.Symbol) CUP$PostfixParser$stack.peek()).value;
		 RESULT = new TERMNode(l, new MultiplyNode(m), r); 
              CUP$PostfixParser$result = parser.getSymbolFactory().newSymbol("TERM",1, ((java_cup.runtime.Symbol)CUP$PostfixParser$stack.elementAt(CUP$PostfixParser$top-2)), ((java_cup.runtime.Symbol)CUP$PostfixParser$stack.peek()), RESULT);
            }
          return CUP$PostfixParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // TERM ::= TERM TERM MINUS 
            {
              TERMNode RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$PostfixParser$stack.elementAt(CUP$PostfixParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$PostfixParser$stack.elementAt(CUP$PostfixParser$top-2)).right;
		TERMNode l = (TERMNode)((java_cup.runtime.Symbol) CUP$PostfixParser$stack.elementAt(CUP$PostfixParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$PostfixParser$stack.elementAt(CUP$PostfixParser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$PostfixParser$stack.elementAt(CUP$PostfixParser$top-1)).right;
		TERMNode r = (TERMNode)((java_cup.runtime.Symbol) CUP$PostfixParser$stack.elementAt(CUP$PostfixParser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$PostfixParser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$PostfixParser$stack.peek()).right;
		Token m = (Token)((java_cup.runtime.Symbol) CUP$PostfixParser$stack.peek()).value;
		 RESULT = new TERMNode(l, new MinusNode(m), r); 
              CUP$PostfixParser$result = parser.getSymbolFactory().newSymbol("TERM",1, ((java_cup.runtime.Symbol)CUP$PostfixParser$stack.elementAt(CUP$PostfixParser$top-2)), ((java_cup.runtime.Symbol)CUP$PostfixParser$stack.peek()), RESULT);
            }
          return CUP$PostfixParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // TERM ::= TERM TERM PLUS 
            {
              TERMNode RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$PostfixParser$stack.elementAt(CUP$PostfixParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$PostfixParser$stack.elementAt(CUP$PostfixParser$top-2)).right;
		TERMNode l = (TERMNode)((java_cup.runtime.Symbol) CUP$PostfixParser$stack.elementAt(CUP$PostfixParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$PostfixParser$stack.elementAt(CUP$PostfixParser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$PostfixParser$stack.elementAt(CUP$PostfixParser$top-1)).right;
		TERMNode r = (TERMNode)((java_cup.runtime.Symbol) CUP$PostfixParser$stack.elementAt(CUP$PostfixParser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$PostfixParser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$PostfixParser$stack.peek()).right;
		Token m = (Token)((java_cup.runtime.Symbol) CUP$PostfixParser$stack.peek()).value;
		 RESULT = new TERMNode(l, new PlusNode(m), r); 
              CUP$PostfixParser$result = parser.getSymbolFactory().newSymbol("TERM",1, ((java_cup.runtime.Symbol)CUP$PostfixParser$stack.elementAt(CUP$PostfixParser$top-2)), ((java_cup.runtime.Symbol)CUP$PostfixParser$stack.peek()), RESULT);
            }
          return CUP$PostfixParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // START ::= TERM 
            {
              STARTNode RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$PostfixParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$PostfixParser$stack.peek()).right;
		TERMNode l = (TERMNode)((java_cup.runtime.Symbol) CUP$PostfixParser$stack.peek()).value;
		 RESULT = new STARTNode(l); 
              CUP$PostfixParser$result = parser.getSymbolFactory().newSymbol("START",0, ((java_cup.runtime.Symbol)CUP$PostfixParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PostfixParser$stack.peek()), RESULT);
            }
          return CUP$PostfixParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= START EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$PostfixParser$stack.elementAt(CUP$PostfixParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$PostfixParser$stack.elementAt(CUP$PostfixParser$top-1)).right;
		STARTNode start_val = (STARTNode)((java_cup.runtime.Symbol) CUP$PostfixParser$stack.elementAt(CUP$PostfixParser$top-1)).value;
		RESULT = start_val;
              CUP$PostfixParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$PostfixParser$stack.elementAt(CUP$PostfixParser$top-1)), ((java_cup.runtime.Symbol)CUP$PostfixParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$PostfixParser$parser.done_parsing();
          return CUP$PostfixParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

